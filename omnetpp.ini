[General]
network = Finalnwk
repeat = 1
sim-time-limit = ${simtime = 20}s 
#sim-time-limit = ${simtime = 1000,500,300}s 
seed-set = ${repetition}
warmup-period = 10s # ?

# Result parameters
# with leading / the file path is absolute
# without leading / the path is relative to the project directory
result-dir = results 

#Record Data
**.numInputHooks = 1
**.numOutputHooks = 1
**.inputHook[0].typename = "ThruputMeter"
**.outputHook[0].typename = "ThruputMeter"
**.maxInterval = 1s	
**.batchSize = 10000 
**.scalar-recording = true

# some can be enabled if desired, but
# this produces a lot of data
**.HTTPserver.eth[*].inputHook[0].**.vector-recording = true
**.HTTPserver.eth[*].outputHook[0].**.vector-recording = true
**.FTPserver.eth[*].inputHook[0].**.vector-recording = true
**.FTPserver.eth[*].outputHook[0].**.vector-recording = true
**.UDPserver.eth[*].inputHook[0].**.vector-recording = true
**.UDPserver.eth[*].outputHook[0].**.vector-recording = true
**.SensorCar.udpApp[0].**.vector-recording = true
**.truck[1].tcpApp[0].**.vector-recording = true
# disable all others
**.vector-recording = false

## With the following two lines you can record all events for
## detailed examination in the graphical OMNeT++
eventlog-file = omnetpp.log
record-eventlog = true

## With the following three lines you can redirect the output of the 
## stdout print to a file for detailed examination
cmdenv-express-mode = true
#cmdenv-redirect-output = true
#cmdenv-output-file = log.txt

#Specify TestArea and Mobility
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

#**.mobilityType = "CircleMobility"
**.mobilityType = "StationaryMobility"
**.mobility.initFromDisplayString = false

**.routerCH.mobility.initialX = 158m
**.routerCH.mobility.initialY = 211m

**.routerLab.mobility.initialX = 158m
**.routerLab.mobility.initialY = 77m

**.headAP.mobility.initialX = 158m
**.headAP.mobility.initialY = 324m
**.headAP.mobility.initialZ = 0m

**.truck[*].mobility.initialX = 249m + uniform(0m, 100m)
**.truck[*].mobility.initialY = 369m + uniform(0m, 30m)
**.truck[*].mobility.initialZ = 0m

**.FTPtruck.mobility.initialX = 316m
**.FTPtruck.mobility.initialY = 325m

**.HTTPserver.mobility.initialX = 287m
**.HTTPserver.mobility.initialY = 211m

**.FTPserver.mobility.initialX = 316m
**.FTPserver.mobility.initialY = 19m

**.UDPserver.mobility.initialX = 316m
**.UDPserver.mobility.initialY = 90m

**.SensorCar.mobility.initialX = 49m
**.SensorCar.mobility.initialY = 330m

######################### VEHICLES ##############################

# CLUSTER TRUCKS (HTTP) SETTINGS
**.truck[*].numTcpApps = 1
**.truck[*].tcpApp[0].typename = "TCPBasicClientApp"
**.truck[*].tcpApp[0].requestLength = 200B
**.truck[*].tcpApp[0].replyLength = 400kB  
**.truck[*].tcpApp[0].localPort = -1
**.truck[*].tcpApp[0].connectPort = 80 
**.truck[*].tcpApp[0].connectAddress = "HTTPserver"
**.truck[*].tcpApp[0].numRequestsPerSession = 1  
**.truck[*].tcpApp[0].thinkTime = 0s
**.truck[*].tcpApp[0].idleInterval = 100ms # HTTP requests are sent periodically every 100ms

# HTTPserver Settings
**.HTTPserver.numTcpApps = 1
**.HTTPserver.tcpApp[0].typename = "TCPGenericSrvApp" # HTTP stream is bidirectional
**.HTTPserver.tcpApp[0].localAddress = "HTTPserver"
**.HTTPserver.tcpApp[0].localPort = 80

#FTPtruck FTP Upload settings
**.FTPtruck.numTcpApps = 1
**.FTPtruck.tcpApp[0].typename = "TCPBasicClientApp"
**.FTPtruck.tcpApp[0].connectAddress = "FTPserver"
**.FTPtruck.tcpApp[0].localAddress = "FTPtruck"
**.FTPtruck.tcpApp[0].localPort = -1
**.FTPtruck.tcpApp[0].connectPort = 21
**.FTPtruck.tcpApp[0].requestLength = 100MB # is this an appropriate file size? 
**.FTPtruck.tcpApp[0].replyLength = 100B
**.FTPtruck.tcpApp[0].thinkTime = 0s
**.FTPtruck.tcpApp[0].idleInterval = 0s #one car inside the platoon CONTINUOUSLY transmits a large file using FTP from the cluster to the test lab

#FTPserver Settings
**.FTPserver.numTcpApps = 1
**.FTPserver.tcpApp[0].typename = "TCPSinkApp" # since here, we only consider an FTP upload
**.FTPserver.tcpApp[0].localAddress = "FTPserver"
**.FTPserver.tcpApp[0].localPort = 21

#SensorCar UDP settings
**.SensorCar.numUdpApps = 1
**.SensorCar.udpApp[0].typename = "UDPHookedApp"
**.SensorCar.udpApp[0].localAddress = "SensorCar"
**.SensorCar.udpApp[0].localPort = 1001
**.SensorCar.udpApp[0].destPort = 1000
**.SensorCar.udpApp[0].destAddresses = "UDPserver"
**.SensorCar.udpApp[0].startTime = 5s
**.SensorCar.udpApp[0].messageLength = uniform(200B,700B) #3D model data from tracefile_2.csv
**.SensorCar.udpApp[0].sendInterval = 20ms

# UDPserver Settings
**.UDPserver.numUdpApps = 1
**.UDPserver.udpApp[0].typename = "UDPHookedApp"
**.UDPserver.udpApp[0].localAddress = "UDPserver" # is it necessary to specify the localAddress?
**.UDPserver.udpApp[0].localPort = 1000
**.UDPserver.udpApp[0].destPort = 1001
**.UDPserver.udpApp[0].destAddresses = "SensorCar"
**.UDPserver.udpApp[0].startTime = 5s
**.UDPserver.udpApp[0].messageLength = uniform(200B,700B) #3D model data from tracefile_2.csv
**.UDPserver.udpApp[0].sendInterval = 20ms
#How is the response of the UDPserver handled? Is the messageLength the same as the data sent from SensorCar?

# TCP settings
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
**.tcp.windowScalingSupport = true
**.tcpApp[*].dataTransferMode = "object"
**.tcp.mss = 1460  
**.tcp.advertisedWindow = 1460000 # 1000 * 1460

# Routing
**.networkConfiguratorModule = "configurator"
**.queueType = "DropTailQueue"
**.queue.frameCapacity = 100
#**.<name of router cluster head>.routingTable.routingFile = 
#**.<name of router at test lab>.routingTable.routingFile = 

# channel physical parameters
**.receiver.sensitivity = -110dBm

# NIC settings
**.mac.address = "auto"
**.mac.maxQueueSize = 50 # packetSize
**.mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.opMode = "g(mixed)"
**.wlan[*].bitrate = 54Mbps
**.pathLoss.alpha = 2 #free-space pathloss gradient
#**.wlan[0].radio.transmitter.communicationRange = 500m
#**.wlan[0].radio.receiver.ignoreInterference = true # Ignoring interference
#**.carrierFrequency = 2.4GHz